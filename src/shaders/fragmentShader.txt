#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[10];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour[10];
uniform vec3 attenuation[10];

uniform float shineDamper;
uniform float reflectivity;
uniform float ambientLight;
uniform float diffuseMultiplier;
uniform float specularMultiplier;

uniform bool diffuseSwitch;
uniform bool ambientSwitch;
uniform bool specularSwitch;

void main(void){
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitVectorToCamera = normalize(toCameraVector);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);

    float amb = (0.0);
    if(ambientSwitch){
        amb = ambientLight;
    }

    for(int i=0; i<10; i++){
        float distance = length(toLightVector[i]);
        float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
        
        vec3 unitLightVector = normalize(toLightVector[i]);
        float nDot1 = dot(unitNormal, unitLightVector);
        float brightness = max(nDot1, 0.0);

        vec3 lightDirection = -unitLightVector;
        vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
        float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
        specularFactor = max(specularFactor, 0.0);
        float dampedFactor = pow(specularFactor, shineDamper);

        totalDiffuse +=  (brightness * lightColour[i])/attFactor;
        totalSpecular += (dampedFactor * reflectivity * lightColour[i])/attFactor;
    }
    if(!diffuseSwitch){
        totalDiffuse = max(vec3(0,0,0)*diffuseMultiplier, amb);
    }else{totalDiffuse = max(totalDiffuse*diffuseMultiplier, amb);}
    
    if(!specularSwitch){
        totalSpecular = vec3(0,0,0) * specularMultiplier;
    }else{totalSpecular = totalSpecular * specularMultiplier;}

    vec4 textureColour = texture(textureSampler,pass_textureCoordinates);
    if(textureColour.a < 0.5){
        discard;
    }

    out_Color = vec4(totalDiffuse,1.0)* textureColour + vec4(totalSpecular, 1.0);
}